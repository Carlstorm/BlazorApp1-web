@using BlazorApp2.Models
<div class="component" @onmouseover="OpenBar" @onmouseout="CloseBar">
    <div class="component_side_bar @(BarIsOpen ? "component_side_bar--open" : "")">
        @if (Genres is null || TvGenres is null)
        {
            <p>error getting genres</p>
        } else
        {
            @if (GalleryMode == 0)
            {
                <button @onclick="() => SetSelectedGenre(null)" class="Genre @(null == ActiveGenre ? "Genre--selected" : "")">All</button>
                @foreach (GenreModel genre in Genres)
                {
                    <button @onclick="() => SetSelectedGenre(genre.Id)" class="Genre @(genre.Id == ActiveGenre ? "Genre--selected" : "")">@genre.Name</button>
                }
            } else
            {
                <button @onclick="() => SetSelectedGenre(null)" class="Genre @(null == ActiveTvGenre ? "Genre--selected" : "")">All</button>
                @foreach (GenreModel genre in TvGenres)
                {
                    <button @onclick="() => SetSelectedGenre(genre.Id)" class="Genre @(genre.Id == ActiveTvGenre ? "Genre--selected" : "")">@genre.Name</button>
                }
            }

        }
        <div class="component_side_bar_sort">
            <span>Sort by:</span>
            <select @onchange="SetSelectedSort">
                <option value="popularity.desc">Popularity</option>
                <option value="vote_average.desc">Rating</option>
                <option value="primary_release_date.desc">Release date</option>
                <option value="vote_count.desc">Vote count</option>
            </select>
        </div>
    </div>
    <div class="component_tab_wrap">
        <div class="component_tab @(BarIsOpen ? "component_tab--open" : "")">
            <div></div>
            <div></div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<int?> GenreChanged { get; set; }

    [Parameter]
    public EventCallback<string?> SortChanged { get; set; }

    [Parameter]
    public List<GenreModel>? Genres { get; set; }

    [Parameter]
    public int? ActiveGenre { get; set; }

    [Parameter]
    public List<GenreModel>? TvGenres { get; set; }

    [Parameter]
    public int? ActiveTvGenre { get; set; }

    [Parameter]
    public int GalleryMode { get; set; }

    public bool BarIsOpen = false;

    private void OpenBar()
    {
        BarIsOpen = true;
    }

    private void CloseBar()
    {
        BarIsOpen = false;
    }

    private async Task SetSelectedGenre(int? NewGenre)
    {
        await GenreChanged.InvokeAsync(NewGenre);
    }

    private async Task SetSelectedSort(ChangeEventArgs e)
    {
        string selectedValue = e.Value.ToString();
        await SortChanged.InvokeAsync(selectedValue);
    }
}
