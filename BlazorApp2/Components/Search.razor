@using BlazorApp2.SvgComponents
@using BlazorApp2.Services

<div class="component" style="width: @(OpenState ? "200px" : "32px")">
    <div class="search_wrap @(OpenState ? "search_wrap--open" : "search_wrap--closed")">
        <input value="@SearchQuery" @oninput="HandleInput" placeholder="search" @ref="inputElement">
        <!-- Use a lambda expression to handle the click event -->
        <SearchIcon ClassName="@(OpenState ? "open" : "closed")" OnClick="ToggleOpen" OpenState="@OpenState" />
    </div>
</div>

@code {
    [Parameter]
    public Func<Task> ResetFilter { get; set; }

    [Parameter]
    public string SearchQuery { get; set; }

    [Parameter]
    public EventCallback<string> SearchQueryChanged { get; set; }

    private Timer debounceTimer;

    // You can use this method to handle the input change event
    // and invoke the OnInput event callback with the provided value
    async Task HandleInput(ChangeEventArgs e)
    {
        // Clear the existing timer (if any)
        debounceTimer?.Dispose();

        // Start a new timer to delay the method invocation
        debounceTimer = new Timer(async _ =>
        {
            // Switch execution to the UI thread
            await InvokeAsync(async () =>
            {
                SearchQuery = e.Value.ToString();
                await SearchQueryChanged.InvokeAsync(SearchQuery);
            });
        }, null, 350, Timeout.Infinite);
    }

    private ElementReference inputElement; // Reference to the input element

    public bool OpenState = false;

    // Method to toggle the OpenState
    public void ToggleOpen()
    {
        OpenState = !OpenState;
        if (OpenState)
        {
            // Focus the input element when OpenState is true
            _ = inputElement.FocusAsync();
        }
        else if (SearchQuery != "")
        {
            ResetFilter();
        }
    }
}